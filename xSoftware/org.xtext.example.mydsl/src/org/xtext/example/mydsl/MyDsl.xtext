// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.uniandes.edu.co/xsoftware" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Api returns Api:
	{Api}
	'apiURL' EQUAL (url=EString) SEMICOLON
		entidades+=Entidad*
		/**primitivetypes+=PrimitiveType
		serviciosRest+=ServicioRest
		tests+=Test**/;

Entidad returns Entidad:
	SimpleEntity | MockarooEntity;

PrimitiveType returns PrimitiveType:
	MyNumeric | MyString | MyBoolean;


Atributo returns Atributo:
	AtributoMocka | AtributoArreglo | AtributoSimple;

AtributoMocka returns AtributoMocka:
	(tipo=TipoAtributo) (nombre=EString) ('(' ((primaryKey?='PK,mockType' EQUAL (mockType=Mockaroo))|('mockType' EQUAL (mockType=Mockaroo))) ')') SEMICOLON;
	
AtributoArreglo returns AtributoArreglo:
	(tipo=TipoAtributo)'[' ']' (nombre=EString) SEMICOLON;
	
AtributoSimple returns AtributoSimple:
	(tipo=TipoAtributo) (nombre=EString) SEMICOLON;


EString returns ecore::EString:
	STRING | ID;

MockarooEntity returns MockarooEntity:
	'Entity' nombre=EString '{'
		atributos+=(Atributo)*
	'}';

ServicioRest returns ServicioRest:
	'ServicioRest'
	'{'
		('metodo' metodo=TipoMetodoRest)?
		('nombre' nombre=EString)?
		'entidades' '(' entidades+=[Entidad|EString] ( "," entidades+=[Entidad|EString])* ')' 
		'response' response=Response
	'}';

Test returns Test:
	'Test'
	'{'
		('descripcion' descripcion=EString)?
		'service' service=[ServicioRest|EString]
		('mappings' '{' mappings+=Mapping ( "," mappings+=Mapping)* '}' )?
		('asertions' '{' asertions+=Asercion ( "," asertions+=Asercion)* '}' )?
	'}';

SimpleEntity returns SimpleEntity:
	'SimpleEntity' (nombre=EString) '{'
		atributos+=(AtributoSimple)*
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum TipoAtributo returns TipoAtributo:
				string = 'string' | int = 'int' | boolean = 'boolean';

enum Mockaroo returns Mockaroo:
				FirstNameType = 'FirstNameType' | LastNameType = 'LastNameType' | FamilyNameType = 'FamilyNameType' | FullNameType = 'FullNameType' | GenderType = 'GenderType' | EmailAddressType = 'EmailAddressType' | PhoneType = 'PhoneType' | CountryType = 'CountryType' | CityType = 'CityType' | CountryCodeType = 'CountryCodeType' | LatitudeType = 'LatitudeType' | LongitudType = 'LongitudType' | RowNumberType = 'RowNumberType' | BooleanType = 'BooleanType';

MyNumeric returns MyNumeric:
	{MyNumeric}
	'MyNumeric'
	'{'
		('valor' valor=EDouble)?
	'}';

MyString returns MyString:
	{MyString}
	'MyString'
	'{'
		('valor' valor=EString)?
	'}';

MyBoolean returns MyBoolean:
	{MyBoolean}
	(valor?='valor')?
	'MyBoolean'
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum TipoMetodoRest returns TipoMetodoRest:
				GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';

Response returns Response:
	'Response'
	'{'
		'atributos' '{' atributos+=Atributo ( "," atributos+=Atributo)* '}' 
	'}';

Mapping returns Mapping:
	'Mapping'
	'{'
		'value' value=[Elemento|EString]
		'parametro' parametro=Parametro
	'}';

Asercion returns Asercion:
	'Asercion'
	'{'
		'elemento1' elemento1=[Elemento|EString]
		'elemento2' elemento2=[Elemento|EString]
	'}';

Parametro returns Parametro:
	{Parametro}
	'Parametro'
	'{'
		('nombre' nombre=EString)?
		('tipo' tipo=TipoParametro)?
	'}';

enum TipoParametro returns TipoParametro:
				Path = 'Path' | Query = 'Query' | Body = 'Body';
				
				

terminal EQUAL : "=";
terminal SEMICOLON : ";";
