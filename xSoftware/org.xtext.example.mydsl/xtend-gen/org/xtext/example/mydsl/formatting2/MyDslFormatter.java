/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import xSoftware.Api;
import xSoftware.AtributoSimple;
import xSoftware.Entidad;
import xSoftware.PrimitiveType;
import xSoftware.ServicioRest;
import xSoftware.SimpleEntity;
import xSoftware.Test;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Api api, @Extension final IFormattableDocument document) {
    EList<Entidad> _entidades = api.getEntidades();
    for (final Entidad entidad : _entidades) {
      document.<Entidad>format(entidad);
    }
    EList<PrimitiveType> _primitivetypes = api.getPrimitivetypes();
    for (final PrimitiveType primitiveType : _primitivetypes) {
      document.<PrimitiveType>format(primitiveType);
    }
    EList<ServicioRest> _serviciosRest = api.getServiciosRest();
    for (final ServicioRest servicioRest : _serviciosRest) {
      document.<ServicioRest>format(servicioRest);
    }
    EList<Test> _tests = api.getTests();
    for (final Test test : _tests) {
      document.<Test>format(test);
    }
  }
  
  protected void _format(final SimpleEntity simpleEntity, @Extension final IFormattableDocument document) {
    EList<AtributoSimple> _atributos = simpleEntity.getAtributos();
    for (final AtributoSimple atributoSimple : _atributos) {
      document.<AtributoSimple>format(atributoSimple);
    }
  }
  
  public void format(final Object simpleEntity, final IFormattableDocument document) {
    if (simpleEntity instanceof XtextResource) {
      _format((XtextResource)simpleEntity, document);
      return;
    } else if (simpleEntity instanceof SimpleEntity) {
      _format((SimpleEntity)simpleEntity, document);
      return;
    } else if (simpleEntity instanceof Api) {
      _format((Api)simpleEntity, document);
      return;
    } else if (simpleEntity instanceof EObject) {
      _format((EObject)simpleEntity, document);
      return;
    } else if (simpleEntity == null) {
      _format((Void)null, document);
      return;
    } else if (simpleEntity != null) {
      _format(simpleEntity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(simpleEntity, document).toString());
    }
  }
}
