/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_QueryParam_QuestionMarkKeyword_0_q;
	protected AbstractElementAlias match_Request___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q;
	protected AbstractElementAlias match_Response___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q;
	protected AbstractElementAlias match_Test___MappingKeyword_12_0_LeftSquareBracketKeyword_12_1_RightSquareBracketKeyword_12_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_QueryParam_QuestionMarkKeyword_0_q = new TokenAlias(false, true, grammarAccess.getQueryParamAccess().getQuestionMarkKeyword_0());
		match_Request___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRequestAccess().getLeftSquareBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getRequestAccess().getRightSquareBracketKeyword_5_1()));
		match_Response___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getResponseAccess().getLeftSquareBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getResponseAccess().getRightSquareBracketKeyword_5_1()));
		match_Test___MappingKeyword_12_0_LeftSquareBracketKeyword_12_1_RightSquareBracketKeyword_12_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTestAccess().getMappingKeyword_12_0()), new TokenAlias(false, false, grammarAccess.getTestAccess().getLeftSquareBracketKeyword_12_1()), new TokenAlias(false, false, grammarAccess.getTestAccess().getRightSquareBracketKeyword_12_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EQUAL : "=";
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal SEMICOLON : ";";
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_QueryParam_QuestionMarkKeyword_0_q.equals(syntax))
				emit_QueryParam_QuestionMarkKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Request___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q.equals(syntax))
				emit_Request___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Response___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q.equals(syntax))
				emit_Response___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Test___MappingKeyword_12_0_LeftSquareBracketKeyword_12_1_RightSquareBracketKeyword_12_3__q.equals(syntax))
				emit_Test___MappingKeyword_12_0_LeftSquareBracketKeyword_12_1_RightSquareBracketKeyword_12_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '?'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '${' name=ID
	 */
	protected void emit_QueryParam_QuestionMarkKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     tipoEntidad=[Entidad|ID] (ambiguity) SEMICOLON '}' (rule end)
	 *     tipoPrimitivo=TipoAtributo (ambiguity) SEMICOLON '}' (rule end)
	 */
	protected void emit_Request___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     tipoEntidad=[Entidad|ID] (ambiguity) SEMICOLON '}' (rule end)
	 *     tipoPrimitivo=TipoAtributo (ambiguity) SEMICOLON '}' (rule end)
	 */
	protected void emit_Response___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Mapping' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     descripcion=EString SEMICOLON (ambiguity) 'Assertions' '{' '}' '}' (rule end)
	 *     descripcion=EString SEMICOLON (ambiguity) 'Assertions' '{' asertions+=Asercion
	 */
	protected void emit_Test___MappingKeyword_12_0_LeftSquareBracketKeyword_12_1_RightSquareBracketKeyword_12_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
