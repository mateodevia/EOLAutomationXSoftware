/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Atributo2_BooleanKeyword_0_3_or_IDTerminalRuleCall_0_0_or_IntKeyword_0_2_or_StringKeyword_0_1;
	protected AbstractElementAlias match_Atributo2___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q;
	protected AbstractElementAlias match_ServicioRest___ColonKeyword_7_2_or_DollarSignKeyword_7_5_or_EStringParserRuleCall_7_0_or_LeftCurlyBracketKeyword_7_3_or_QuestionMarkKeyword_7_6_or_RightCurlyBracketKeyword_7_4_or_SolidusKeyword_7_1__a;
	protected AbstractElementAlias match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Atributo2_BooleanKeyword_0_3_or_IDTerminalRuleCall_0_0_or_IntKeyword_0_2_or_StringKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAtributo2Access().getBooleanKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getAtributo2Access().getIDTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getAtributo2Access().getIntKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getAtributo2Access().getStringKeyword_0_1()));
		match_Atributo2___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAtributo2Access().getLeftSquareBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAtributo2Access().getRightSquareBracketKeyword_1_1()));
		match_ServicioRest___ColonKeyword_7_2_or_DollarSignKeyword_7_5_or_EStringParserRuleCall_7_0_or_LeftCurlyBracketKeyword_7_3_or_QuestionMarkKeyword_7_6_or_RightCurlyBracketKeyword_7_4_or_SolidusKeyword_7_1__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getColonKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getDollarSignKeyword_7_5()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getEStringParserRuleCall_7_0()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getLeftCurlyBracketKeyword_7_3()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getQuestionMarkKeyword_7_6()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getRightCurlyBracketKeyword_7_4()), new TokenAlias(false, false, grammarAccess.getServicioRestAccess().getSolidusKeyword_7_1()));
		match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EQUAL : "=";
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal SEMICOLON : ";";
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Atributo2_BooleanKeyword_0_3_or_IDTerminalRuleCall_0_0_or_IntKeyword_0_2_or_StringKeyword_0_1.equals(syntax))
				emit_Atributo2_BooleanKeyword_0_3_or_IDTerminalRuleCall_0_0_or_IntKeyword_0_2_or_StringKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Atributo2___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q.equals(syntax))
				emit_Atributo2___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ServicioRest___ColonKeyword_7_2_or_DollarSignKeyword_7_5_or_EStringParserRuleCall_7_0_or_LeftCurlyBracketKeyword_7_3_or_QuestionMarkKeyword_7_6_or_RightCurlyBracketKeyword_7_4_or_SolidusKeyword_7_1__a.equals(syntax))
				emit_ServicioRest___ColonKeyword_7_2_or_DollarSignKeyword_7_5_or_EStringParserRuleCall_7_0_or_LeftCurlyBracketKeyword_7_3_or_QuestionMarkKeyword_7_6_or_RightCurlyBracketKeyword_7_4_or_SolidusKeyword_7_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q.equals(syntax))
				emit_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ID | 'string' | 'int' | 'boolean'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('[' ']')? (rule start)
	 */
	protected void emit_Atributo2_BooleanKeyword_0_3_or_IDTerminalRuleCall_0_0_or_IntKeyword_0_2_or_StringKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ID | 'string' | 'int' | 'boolean') (ambiguity) (rule start)
	 */
	protected void emit_Atributo2___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         EString | 
	  *         '/' | 
	  *         ':' | 
	  *         '{' | 
	  *         '}' | 
	  *         '$' | 
	  *         '?'
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     url=EString (ambiguity) SEMICOLON request=Request
	 *     url=EString (ambiguity) SEMICOLON response=Response
	 */
	protected void emit_ServicioRest___ColonKeyword_7_2_or_DollarSignKeyword_7_5_or_EStringParserRuleCall_7_0_or_LeftCurlyBracketKeyword_7_3_or_QuestionMarkKeyword_7_6_or_RightCurlyBracketKeyword_7_4_or_SolidusKeyword_7_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     nombre='boolean' (ambiguity) (rule end)
	 *     nombre='int' (ambiguity) (rule end)
	 *     nombre='string' (ambiguity) (rule end)
	 *     nombre=EString (ambiguity) (rule end)
	 */
	protected void emit_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
