/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import xSoftware.Api;
import xSoftware.Asercion;
import xSoftware.AtributoArreglo;
import xSoftware.AtributoMocka;
import xSoftware.AtributoSimple;
import xSoftware.Entidad;
import xSoftware.Mapping;
import xSoftware.MockarooEntity;
import xSoftware.MyBoolean;
import xSoftware.MyNumeric;
import xSoftware.MyString;
import xSoftware.Parametro;
import xSoftware.Request;
import xSoftware.Response;
import xSoftware.ServicioRest;
import xSoftware.SimpleEntity;
import xSoftware.Test;
import xSoftware.XSoftwarePackage;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XSoftwarePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XSoftwarePackage.API:
				sequence_Api(context, (Api) semanticObject); 
				return; 
			case XSoftwarePackage.ASERCION:
				sequence_Asercion(context, (Asercion) semanticObject); 
				return; 
			case XSoftwarePackage.ATRIBUTO_ARREGLO:
				sequence_AtributoArreglo(context, (AtributoArreglo) semanticObject); 
				return; 
			case XSoftwarePackage.ATRIBUTO_MOCKA:
				sequence_AtributoMocka(context, (AtributoMocka) semanticObject); 
				return; 
			case XSoftwarePackage.ATRIBUTO_SIMPLE:
				sequence_AtributoSimple(context, (AtributoSimple) semanticObject); 
				return; 
			case XSoftwarePackage.ENTIDAD:
				sequence_TipoEntidad(context, (Entidad) semanticObject); 
				return; 
			case XSoftwarePackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case XSoftwarePackage.MOCKAROO_ENTITY:
				sequence_MockarooEntity(context, (MockarooEntity) semanticObject); 
				return; 
			case XSoftwarePackage.MY_BOOLEAN:
				sequence_MyBoolean(context, (MyBoolean) semanticObject); 
				return; 
			case XSoftwarePackage.MY_NUMERIC:
				sequence_MyNumeric(context, (MyNumeric) semanticObject); 
				return; 
			case XSoftwarePackage.MY_STRING:
				sequence_MyString(context, (MyString) semanticObject); 
				return; 
			case XSoftwarePackage.PARAMETRO:
				sequence_Parametro(context, (Parametro) semanticObject); 
				return; 
			case XSoftwarePackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case XSoftwarePackage.RESPONSE:
				sequence_Response(context, (Response) semanticObject); 
				return; 
			case XSoftwarePackage.SERVICIO_REST:
				sequence_ServicioRest(context, (ServicioRest) semanticObject); 
				return; 
			case XSoftwarePackage.SIMPLE_ENTITY:
				sequence_SimpleEntity(context, (SimpleEntity) semanticObject); 
				return; 
			case XSoftwarePackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Api returns Api
	 *
	 * Constraint:
	 *     (url=EString entidades+=Entidad* primitivetypes+=PrimitiveType* serviciosRest+=ServicioRest*)
	 */
	protected void sequence_Api(ISerializationContext context, Api semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Asercion returns Asercion
	 *
	 * Constraint:
	 *     (elemento1=[Elemento|EString] elemento2=[Elemento|EString])
	 */
	protected void sequence_Asercion(ISerializationContext context, Asercion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ASERCION__ELEMENTO1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ASERCION__ELEMENTO1));
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ASERCION__ELEMENTO2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ASERCION__ELEMENTO2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAsercionAccess().getElemento1ElementoEStringParserRuleCall_3_0_1(), semanticObject.eGet(XSoftwarePackage.Literals.ASERCION__ELEMENTO1, false));
		feeder.accept(grammarAccess.getAsercionAccess().getElemento2ElementoEStringParserRuleCall_5_0_1(), semanticObject.eGet(XSoftwarePackage.Literals.ASERCION__ELEMENTO2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Atributo returns AtributoArreglo
	 *     AtributoArreglo returns AtributoArreglo
	 *
	 * Constraint:
	 *     (tipo=TipoAtributo nombre=EString)
	 */
	protected void sequence_AtributoArreglo(ISerializationContext context, AtributoArreglo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__TIPO));
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoArregloAccess().getTipoTipoAtributoEnumRuleCall_0_0(), semanticObject.getTipo());
		feeder.accept(grammarAccess.getAtributoArregloAccess().getNombreEStringParserRuleCall_3_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Atributo returns AtributoMocka
	 *     AtributoMocka returns AtributoMocka
	 *
	 * Constraint:
	 *     (tipo=TipoAtributo nombre=EString ((primaryKey?='PK,mockType' mockType=Mockaroo) | mockType=Mockaroo))
	 */
	protected void sequence_AtributoMocka(ISerializationContext context, AtributoMocka semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atributo returns AtributoSimple
	 *     AtributoSimple returns AtributoSimple
	 *
	 * Constraint:
	 *     (tipo=TipoAtributo nombre=EString)
	 */
	protected void sequence_AtributoSimple(ISerializationContext context, AtributoSimple semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__TIPO));
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ATRIBUTO__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoSimpleAccess().getTipoTipoAtributoEnumRuleCall_0_0(), semanticObject.getTipo());
		feeder.accept(grammarAccess.getAtributoSimpleAccess().getNombreEStringParserRuleCall_1_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (value=[Elemento|EString] parametro=Parametro)
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.MAPPING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.MAPPING__VALUE));
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.MAPPING__PARAMETRO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.MAPPING__PARAMETRO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingAccess().getValueElementoEStringParserRuleCall_3_0_1(), semanticObject.eGet(XSoftwarePackage.Literals.MAPPING__VALUE, false));
		feeder.accept(grammarAccess.getMappingAccess().getParametroParametroParserRuleCall_5_0(), semanticObject.getParametro());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns MockarooEntity
	 *     MockarooEntity returns MockarooEntity
	 *
	 * Constraint:
	 *     (nombre=EString atributos+=Atributo*)
	 */
	protected void sequence_MockarooEntity(ISerializationContext context, MockarooEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveType returns MyBoolean
	 *     Type returns MyBoolean
	 *     MyBoolean returns MyBoolean
	 *
	 * Constraint:
	 *     nombre='boolean'
	 */
	protected void sequence_MyBoolean(ISerializationContext context, MyBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyBooleanAccess().getNombreBooleanKeyword_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveType returns MyNumeric
	 *     Type returns MyNumeric
	 *     MyNumeric returns MyNumeric
	 *
	 * Constraint:
	 *     nombre='int'
	 */
	protected void sequence_MyNumeric(ISerializationContext context, MyNumeric semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyNumericAccess().getNombreIntKeyword_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveType returns MyString
	 *     Type returns MyString
	 *     MyString returns MyString
	 *
	 * Constraint:
	 *     nombre='string'
	 */
	protected void sequence_MyString(ISerializationContext context, MyString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.PRIMITIVE_TYPE__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyStringAccess().getNombreStringKeyword_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parametro returns Parametro
	 *
	 * Constraint:
	 *     (nombre=EString? tipo=TipoParametro?)
	 */
	protected void sequence_Parametro(ISerializationContext context, Parametro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Request returns Request
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.REQUEST__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.REQUEST__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestAccess().getTypeTypeParserRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Response returns Response
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_Response(ISerializationContext context, Response semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.RESPONSE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.RESPONSE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResponseAccess().getTypeTypeParserRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ServicioRest returns ServicioRest
	 *
	 * Constraint:
	 *     (metodo=TipoMetodoRest nombre=EString url=EString request=Request? response=Response)
	 */
	protected void sequence_ServicioRest(ISerializationContext context, ServicioRest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns SimpleEntity
	 *     SimpleEntity returns SimpleEntity
	 *
	 * Constraint:
	 *     (nombre=EString atributos+=AtributoSimple*)
	 */
	protected void sequence_SimpleEntity(ISerializationContext context, SimpleEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (descripcion=EString? service=[ServicioRest|EString] (mappings+=Mapping mappings+=Mapping*)? (asertions+=Asercion asertions+=Asercion*)?)
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Entidad
	 *     TipoEntidad returns Entidad
	 *
	 * Constraint:
	 *     nombre=EString
	 */
	protected void sequence_TipoEntidad(ISerializationContext context, Entidad semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSoftwarePackage.Literals.ENTIDAD__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSoftwarePackage.Literals.ENTIDAD__NOMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTipoEntidadAccess().getNombreEStringParserRuleCall_0(), semanticObject.getNombre());
		feeder.finish();
	}
	
	
}
